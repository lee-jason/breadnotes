name: Deploy to App Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build production Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: breadnotes-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building production Docker image..."
        docker build --target production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: breadnotes-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Run database migrations
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: breadnotes-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Running database migrations..."
        docker run --rm \
          -e DB_HOST="${{ secrets.DB_HOST }}" \
          -e DB_NAME="${{ secrets.DB_NAME }}" \
          -e DB_USER="${{ secrets.DB_USER }}" \
          -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          uv run alembic upgrade head

    - name: Deploy to App Runner
      run: |
        echo "Triggering App Runner deployment..."
        aws apprunner start-deployment --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }}

    - name: Build and Deploy Frontend
      run: |
        echo "Building frontend..."
        cd web
        npm ci
        # Set the API URL to the CloudFront distribution
        export VITE_API_URL="${{ secrets.VITE_API_URL }}"
        npm run build
        
        echo "Deploying frontend to S3..."
        # Configure AWS CLI with the same credentials
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
        
        # Sync build files to S3 frontend bucket (force overwrite)
        aws s3 sync dist/ s3://breadnotes-prod-frontend --delete --exact-timestamps --size-only
        
        # Invalidate CloudFront cache - find frontend distribution by S3 origin
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?contains(DomainName, 'breadnotes-prod-frontend')]].Id | [0]" --output text)
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        else
          echo "No CloudFront distribution found for frontend"
        fi

    - name: Verify deployment
      run: |
        sleep 10
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Check if container is running
          if sudo docker ps | grep -q breadnotes-api; then
            echo "✓ BreadNotes container is running"
            
            # Test if the service responds to health check
            if curl -f -m 10 http://localhost:8000/api/health > /dev/null 2>&1; then
              echo "✓ API health check is responding"
            else
              echo "⚠ API health check is not responding (trying root endpoint)"
              if curl -f -m 10 http://localhost:8000/ > /dev/null 2>&1; then
                echo "✓ API root endpoint is responding"
              else
                echo "⚠ API is not responding (might be normal depending on endpoints)"
              fi
            fi
          else
            echo "✗ BreadNotes container is not running"
            sudo docker ps -a | grep breadnotes-api || echo "No breadnotes-api container found"
            sudo docker logs breadnotes-api || echo "No logs available"
            exit 1
          fi
        EOF