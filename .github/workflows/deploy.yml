name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create environment file
      run: |
        cat > breadnotes.env << EOF
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        EOF
    
    - name: Debug environment file
      run: |
        ls -la breadnotes.env
        echo "--- breadnotes.env contents ---"
        cat breadnotes.env
        echo "--- end breadnotes.env ---"

    - name: Copy environment file to EC2
      run: |
        echo "Attempting to copy breadnotes.env file..."
        scp -v -i ~/.ssh/id_rsa breadnotes.env ec2-user@${{ secrets.EC2_HOST }}:/tmp/breadnotes.env
        echo "scp exit code: $?"

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t breadnotes-api ./api

    - name: Save Docker image as tarball
      run: |
        echo "Saving Docker image..."
        docker save breadnotes-api | gzip > breadnotes-api.tar.gz
        ls -lh breadnotes-api.tar.gz

    - name: Copy Docker image to EC2
      run: |
        echo "Transferring Docker image to EC2..."
        scp -i ~/.ssh/id_rsa breadnotes-api.tar.gz ec2-user@${{ secrets.EC2_HOST }}:/tmp/breadnotes-api.tar.gz

    - name: Verify files copied to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Checking transferred files:"
          ls -lh /tmp/breadnotes.env /tmp/breadnotes-api.tar.gz
          echo "Docker image size: $(stat -c%s /tmp/breadnotes-api.tar.gz) bytes"
        EOF

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Create application directory
          sudo mkdir -p /opt/breadnotes
          
          # Move and setup environment file
          sudo cp /tmp/breadnotes.env /opt/breadnotes/.env
          sudo chmod 600 /opt/breadnotes/.env
          
          # Load Docker image
          echo "Loading Docker image..."
          sudo docker load < /tmp/breadnotes-api.tar.gz
          
          # Run database migrations
          echo "Running database migrations..."
          sudo docker run --rm --env-file /opt/breadnotes/.env breadnotes-api uv run alembic upgrade head || echo "Migration failed or no migrations needed"
          
          # Stop and remove existing container
          echo "Stopping existing containers..."
          sudo docker stop breadnotes-api || true
          sudo docker rm breadnotes-api || true
          
          # Wait a moment for port to be released
          sleep 5
          
          # Start new container
          echo "Starting new container..."
          sudo docker run -d \
            --name breadnotes-api \
            --restart unless-stopped \
            --env-file /opt/breadnotes/.env \
            -p 8000:8000 \
            breadnotes-api
          
          # Wait a moment for container to start
          sleep 5
          
          # Verify container is running
          if sudo docker ps | grep -q breadnotes-api; then
            echo "✓ Container is running"
          else
            echo "✗ Container failed to start"
            sudo docker logs breadnotes-api
            exit 1
          fi

          # Purge unused Docker images
          echo "Removing unused Docker images..."
          sudo docker image prune -af
        EOF

    - name: Build and Deploy Frontend
      run: |
        echo "Building frontend..."
        cd web
        npm ci
        # Set the API URL to the CloudFront distribution
        echo "VITE_API_URL=https://${{ secrets.CLOUDFRONT_DOMAIN }}" >> web/.env
        npm run build
        
        echo "Deploying frontend to S3..."
        # Configure AWS CLI with the same credentials
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
        
        # Sync build files to S3 frontend bucket
        aws s3 sync dist/ s3://breadnotes-prod-frontend --delete
        
        # Invalidate CloudFront cache
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='CloudFront for breadnotes-prod-frontend'].Id" --output text)
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        else
          echo "No CloudFront distribution found for frontend"
        fi

    - name: Verify deployment
      run: |
        sleep 10
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Check if container is running
          if sudo docker ps | grep -q breadnotes-api; then
            echo "✓ BreadNotes container is running"
            
            # Test if the service responds to health check
            if curl -f -m 10 http://localhost:8000/api/health > /dev/null 2>&1; then
              echo "✓ API health check is responding"
            else
              echo "⚠ API health check is not responding (trying root endpoint)"
              if curl -f -m 10 http://localhost:8000/ > /dev/null 2>&1; then
                echo "✓ API root endpoint is responding"
              else
                echo "⚠ API is not responding (might be normal depending on endpoints)"
              fi
            fi
          else
            echo "✗ BreadNotes container is not running"
            sudo docker ps -a | grep breadnotes-api || echo "No breadnotes-api container found"
            sudo docker logs breadnotes-api || echo "No logs available"
            exit 1
          fi
        EOF